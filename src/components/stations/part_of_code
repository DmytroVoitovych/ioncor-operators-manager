// {
    //   const assignedId = store.getAssignment(stationId,slotKey);
    //   const shouldSwap = assignedId  && !assignedId.includes('Extra');
    //   const worker =  operatorStore.workers.find(e=> e.id === assignedId);
    //   const desiredWorker = operatorStore.workers.find(e=> e.id === personId);
    //   const dsWorkerCurrentSt = desiredWorker!.current_station as StationNumber | 'unassigned';

    //   if(shouldSwap){

    //    const swapOrRemove = worker?.known_stations.includes(desiredWorker!.current_station)
    //    ?desiredWorker!.current_station:'unassigned';

    //   const el = removeHistory(worker!);

    //   if(swapOrRemove !== 'unassigned'){
    //     removePersonFromStation(worker!.id,swapOrRemove);
    //     operatorStore.setWorkerHistory(worker!.id,swapOrRemove,el!.date);
    //     store.assignPerson(swapOrRemove as StationNumber,choseSide(swapOrRemove,desiredWorker!.id),worker!.id);
    //     }

    //    operatorStore.setCurrentStation(worker!.id, 'unassigned' as StationNumber);

    //    removeHistory(desiredWorker!);
    //    removePersonFromStation(personId,stationId);
    //    operatorStore.setWorkerHistory(personId,stationId,el!.date);
    //   };
    // // рассмотреть полную замену асайнмент в снапшоте
    // // проконтролировать что именно замена происходит в сгенерированом графике
    // // иначе это будет считать ручным графиком

    //    if(dsWorkerCurrentSt !== 'unassigned') desiredWorker?.station_history.pop();
    //    removePersonFromStation(personId,stationId);
    //    operatorStore.setWorkerHistory(personId,stationId,new Date(now.value));


    //   store.assignPerson(stationId, slotKey, personId);
    // },